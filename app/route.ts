import { GoogleGenerativeAI } from "@google/generative-ai";
import ical from "ical-generator";
import { NextResponse } from "next/server";

// Ensure the API key is available. If not, throw an error at startup.
if (!process.env.GEMINI_API_KEY) {
  throw new Error("Missing GEMINI_API_KEY in environment variables.");
}

// Initialize the Google Generative AI client with the API key.
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);

/**
 * This is the main GET handler for the API route. It generates and returns
 * a dynamic iCalendar (.ics) file.
 */
export async function GET() {
  try {
    // 1. Configure and call the Gemini API
    const model = genAI.getGenerativeModel({ model: "gemini-flash-lite-latest" });
    const prompt =
      "Generate a short, powerful, go-getter affirmation for today. It must be aggressive, motivational, and focused on personal growth and relentless action. Embody a 'get after it' energy. Keep it under 15 words. Return plain text.";

    const request = {
      contents: [{ role: "user", parts: [{ text: prompt }] }],
    };

    const result = await model.generateContent(request);
    const affirmation = result.response.text();

    if (!affirmation || affirmation.trim() === "") {
      throw new Error("Gemini API returned an empty affirmation.");
    }

    // 2. Create the iCalendar object
    const calendar = ical({ name: "Daily Go-Getter Affirmation" });

    // Create a single, all-day event for the current date
    calendar.createEvent({
      start: new Date(),
      allDay: true,
      summary: affirmation.trim(), // Use the AI-generated text as the event title
      description: "Generated by the Affirmation Calendar API.",
    });

    // 3. Return the .ics file as a Response with no caching
    return new Response(calendar.toString(), {
      // Set the status to 200 OK
      status: 200,
      // Define the response headers
      headers: {
        "Content-Type": "text/calendar; charset=utf-8",
        "Content-Disposition": `attachment; filename="affirmation.ics"`,
        // Prevent caching to ensure fresh affirmations on every call
        "Cache-Control": "no-cache, no-store, must-revalidate",
        "Pragma": "no-cache",
        "Expires": "0",
      },
    });
  } catch (error) {
    // If any part of the process fails, log the error for debugging
    console.error("Error generating affirmation calendar:", error);

    // Return a JSON error response with a 500 status code
    return NextResponse.json(
      { error: "Failed to generate the affirmation calendar." },
      { status: 500 }
    );
  }
}
